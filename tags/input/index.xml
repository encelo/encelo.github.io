<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Input on encelo.github.io</title><link>https://encelo.github.io/tags/input/</link><description>Recent content in Input on encelo.github.io</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Mon, 28 Jun 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://encelo.github.io/tags/input/index.xml" rel="self" type="application/rss+xml"/><item><title>nCine Dev Update 17</title><link>https://encelo.github.io/2021-06-28-ncine-dev-update-17/</link><pubDate>Mon, 28 Jun 2021 00:00:00 +0000</pubDate><guid>https://encelo.github.io/2021-06-28-ncine-dev-update-17/</guid><description>&lt;p&gt;Quite some time has passed since the previous development update but I&amp;rsquo;m here again to talk about the latest nCine progress.
By the way, in case you missed the latest &lt;a
href="https://encelo.github.io/2021-06-21-ten-years-ncine/"&gt;article&lt;/a&gt;, the project has recently reached its tenth anniversary. &amp;#x1f609;&lt;/p&gt;</description></item><item><title>nCine Dev Update 11</title><link>https://encelo.github.io/2019-07-16-ncine-dev-update-11/</link><pubDate>Tue, 16 Jul 2019 00:00:00 +0000</pubDate><guid>https://encelo.github.io/2019-07-16-ncine-dev-update-11/</guid><description>&lt;p&gt;Exciting news for this development update: a new supported platform! &amp;#x1f37e;&lt;/p&gt;
&lt;h3 class="relative group"&gt;Emscripten
&lt;div id="emscripten" class="anchor"&gt;&lt;/div&gt;
&lt;/h3&gt;
&lt;p&gt;I remember playing with the idea of porting the nCine to &lt;a
href="https://emscripten.org/"
target="_blank"
&gt;Emscripten&lt;/a&gt; years ago.
After all I had every requirement in place: I used OpenGL ES for Android, GLFW and SDL2 as input backends, OpenAL and Vorbis for audio, libpng for images and already supported a POSIX API.&lt;/p&gt;</description></item><item><title>nCine Dev Update 9</title><link>https://encelo.github.io/2019-05-14-ncine-dev-update-9/</link><pubDate>Tue, 14 May 2019 00:00:00 +0000</pubDate><guid>https://encelo.github.io/2019-05-14-ncine-dev-update-9/</guid><description>&lt;p&gt;It has been a month and a half of small but useful updates for the nCine.&lt;/p&gt;
&lt;h3 class="relative group"&gt;LibPNG
&lt;div id="libpng" class="anchor"&gt;&lt;/div&gt;
&lt;/h3&gt;
&lt;p&gt;The PNG image loader has been modified to support more color types, by copying some code from the libpng &lt;a
href="https://sourceforge.net/p/libpng/code/ci/master/tree/example.c"
target="_blank"
&gt;example&lt;/a&gt;. It means that any nCine game is now able to properly load PNG images with palette or with gray-alpha channels and to expand or strip bit depths that are different than the standard 8 bits.&lt;/p&gt;</description></item><item><title>nCine Dev Update 2</title><link>https://encelo.github.io/2017-10-22-ncine-dev-update-2/</link><pubDate>Sun, 22 Oct 2017 00:00:00 +0000</pubDate><guid>https://encelo.github.io/2017-10-22-ncine-dev-update-2/</guid><description>&lt;p&gt;During those three months I have been working on two big features.&lt;/p&gt;
&lt;p&gt;The first one has been the support of SDL2 GameController &lt;a
href="https://wiki.libsdl.org/SDL_GameControllerAddMapping"
target="_blank"
&gt;mapping&lt;/a&gt; format.
Initially my plan was to build a layer on top of my joystick input functions and leave the mapping code outside, as helper functions in a file distributed along the source of my tests and only linked by them.
Later on I decided to refactor everything and bring the code inside the engine, in an effort to make it easier for an application to transparently use it.&lt;/p&gt;</description></item><item><title>nCine Dev Update 1</title><link>https://encelo.github.io/2017-09-18-ncine-dev-update-1/</link><pubDate>Mon, 18 Sep 2017 00:00:00 +0000</pubDate><guid>https://encelo.github.io/2017-09-18-ncine-dev-update-1/</guid><description>&lt;p&gt;During June and July 2017 I have been working as usual, in my spare time, on the project. &amp;#x1f609;&lt;/p&gt;
&lt;p&gt;The first big June addition has been the automatic &lt;em&gt;screen culling&lt;/em&gt; of sprites, a very important feature needed in order to support games extending on multiple screens. The culling works on sprites of any kind (regular ones, particles, text nodes) and regardless of their scaling or rotation parameters. If those sprites are completely outside of the screen they will just not be rendered, saving draw calls from being issued.&lt;/p&gt;</description></item></channel></rss>