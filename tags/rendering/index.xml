<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Rendering on encelo.github.io</title><link>https://encelo.github.io/tags/rendering/</link><description>Recent content in Rendering on encelo.github.io</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Tue, 12 Dec 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://encelo.github.io/tags/rendering/index.xml" rel="self" type="application/rss+xml"/><item><title>nCine Dev Update 20</title><link>https://encelo.github.io/2023-12-12-ncine-dev-update-20/</link><pubDate>Tue, 12 Dec 2023 00:00:00 +0000</pubDate><guid>https://encelo.github.io/2023-12-12-ncine-dev-update-20/</guid><description>&lt;p&gt;Lately, the development rate of the nCine slowed down a bit. I think it is normal for a project that spans so many years, and developed by a single person, to see some oscillations.
This is why this article covers such a long period, a period in which there have been maybe a few new features, but important ones.&lt;/p&gt;</description></item><item><title>nCine Dev Update 19</title><link>https://encelo.github.io/2022-09-07-ncine-dev-update-19/</link><pubDate>Wed, 07 Sep 2022 00:00:00 +0000</pubDate><guid>https://encelo.github.io/2022-09-07-ncine-dev-update-19/</guid><description>&lt;p&gt;Yet another update coming after a very long time since the previous, apologies for that. Well, at least it comes packed with a lot of enhancements from the last months. &amp;#x1f4aa;&lt;/p&gt;</description></item><item><title>nCine Dev Update 18</title><link>https://encelo.github.io/2022-01-30-ncine-dev-update-18/</link><pubDate>Sun, 30 Jan 2022 00:00:00 +0000</pubDate><guid>https://encelo.github.io/2022-01-30-ncine-dev-update-18/</guid><description>&lt;p&gt;After a very long time without an update, here comes a new one. It is filled with all the work done in the last six months. &amp;#x1f4aa;&lt;/p&gt;</description></item><item><title>nCine Intel Mesa 20 Driver Benchmark</title><link>https://encelo.github.io/2020-03-30-ncine-intel-mesa-20-driver-benchmark/</link><pubDate>Mon, 30 Mar 2020 00:00:00 +0000</pubDate><guid>https://encelo.github.io/2020-03-30-ncine-intel-mesa-20-driver-benchmark/</guid><description>&lt;p&gt;Today I upgraded my Arch Linux workstation with pacman as I usually do every day and a little surprise was waiting for me.
After a long time in &lt;code&gt;[testing]&lt;/code&gt;, &lt;a
href="https://www.archlinux.org/packages/extra/x86_64/mesa/"
target="_blank"
&gt;Mesa 20&lt;/a&gt; came out of the &lt;code&gt;[extra]&lt;/code&gt; repository, ready to be installed.&lt;/p&gt;</description></item><item><title>nCine Dev Update 13</title><link>https://encelo.github.io/2019-12-24-ncine-dev-update-13/</link><pubDate>Tue, 24 Dec 2019 00:00:00 +0000</pubDate><guid>https://encelo.github.io/2019-12-24-ncine-dev-update-13/</guid><description>&lt;p&gt;A lot of work has been put into the project as usual during those last months of the year.&lt;/p&gt;
&lt;p&gt;Plenty of new and important features have been added to the engine, many of them are related to extending the capabilities of sprite rendering.&lt;/p&gt;</description></item><item><title>nCine Dev Update 11</title><link>https://encelo.github.io/2019-07-16-ncine-dev-update-11/</link><pubDate>Tue, 16 Jul 2019 00:00:00 +0000</pubDate><guid>https://encelo.github.io/2019-07-16-ncine-dev-update-11/</guid><description>&lt;p&gt;Exciting news for this development update: a new supported platform! &amp;#x1f37e;&lt;/p&gt;
&lt;h3 class="relative group"&gt;Emscripten
&lt;div id="emscripten" class="anchor"&gt;&lt;/div&gt;
&lt;/h3&gt;
&lt;p&gt;I remember playing with the idea of porting the nCine to &lt;a
href="https://emscripten.org/"
target="_blank"
&gt;Emscripten&lt;/a&gt; years ago.
After all I had every requirement in place: I used OpenGL ES for Android, GLFW and SDL2 as input backends, OpenAL and Vorbis for audio, libpng for images and already supported a POSIX API.&lt;/p&gt;</description></item><item><title>nCine Dev Update 9</title><link>https://encelo.github.io/2019-05-14-ncine-dev-update-9/</link><pubDate>Tue, 14 May 2019 00:00:00 +0000</pubDate><guid>https://encelo.github.io/2019-05-14-ncine-dev-update-9/</guid><description>&lt;p&gt;It has been a month and a half of small but useful updates for the nCine.&lt;/p&gt;
&lt;h3 class="relative group"&gt;LibPNG
&lt;div id="libpng" class="anchor"&gt;&lt;/div&gt;
&lt;/h3&gt;
&lt;p&gt;The PNG image loader has been modified to support more color types, by copying some code from the libpng &lt;a
href="https://sourceforge.net/p/libpng/code/ci/master/tree/example.c"
target="_blank"
&gt;example&lt;/a&gt;. It means that any nCine game is now able to properly load PNG images with palette or with gray-alpha channels and to expand or strip bit depths that are different than the standard 8 bits.&lt;/p&gt;</description></item><item><title>nCine Dev Update 4</title><link>https://encelo.github.io/2018-08-06-ncine-dev-update-4/</link><pubDate>Mon, 06 Aug 2018 00:00:00 +0000</pubDate><guid>https://encelo.github.io/2018-08-06-ncine-dev-update-4/</guid><description>&lt;p&gt;Plenty of work has been done during these few last months as I decided once again to update the engine renderer.
This time it went from using OpenGL 2 and OpenGL ES 2 to 3.3 and 3.0 respectively.&lt;/p&gt;</description></item><item><title>nCine Dev Update 1</title><link>https://encelo.github.io/2017-09-18-ncine-dev-update-1/</link><pubDate>Mon, 18 Sep 2017 00:00:00 +0000</pubDate><guid>https://encelo.github.io/2017-09-18-ncine-dev-update-1/</guid><description>&lt;p&gt;During June and July 2017 I have been working as usual, in my spare time, on the project. &amp;#x1f609;&lt;/p&gt;
&lt;p&gt;The first big June addition has been the automatic &lt;em&gt;screen culling&lt;/em&gt; of sprites, a very important feature needed in order to support games extending on multiple screens. The culling works on sprites of any kind (regular ones, particles, text nodes) and regardless of their scaling or rotation parameters. If those sprites are completely outside of the screen they will just not be rendered, saving draw calls from being issued.&lt;/p&gt;</description></item></channel></rss>